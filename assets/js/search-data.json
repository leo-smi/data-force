{
  
    
        "post0": {
            "title": "Title",
            "content": "import pandas as pd import urllib.request !pip install plotly==4.6.0 import plotly print(plotly.__version__) # ORCA !pip install plotly&gt;=4.7.1 !wget https://github.com/plotly/orca/releases/download/v1.2.1/orca-1.2.1-x86_64.AppImage -O /usr/local/bin/orca !chmod +x /usr/local/bin/orca !apt-get install xvfb libgtk2.0-0 libgconf-2-4 # !pip install &quot;notebook&gt;=5.3&quot; &quot;ipywidgets&gt;=7.2&quot; . import plotly.express as px # função para plotar o mapa def map1_figure(df = None, coluna = None, fig_format = &quot;svg&quot;): # carregando o geojson import requests import json json_url = r&quot;https://raw.githubusercontent.com/fititnt/gis-dataset-brasil/master/uf/geojson/uf.json&quot; r = requests.get(json_url) geojson = json.loads(r.content.decode(&#39;latin-1&#39;)) # gerando o mapa fig = px.choropleth_mapbox( df, geojson = geojson, color = coluna, color_continuous_scale = &quot;viridis&quot;, locations = &quot;ibge_code&quot;, featureidkey = &quot;properties.GEOCODIGO&quot;, center = {&quot;lat&quot;: -15.0, &quot;lon&quot;: -54.3}, # latlong do Brasil mapbox_style = &quot;outdoors&quot;, zoom = 2.8, labels = { &#39;state&#39; : &#39; Estado&#39;, &#39;ibge_code&#39; : &#39; Código IBGE&#39;, &#39;pop_2020&#39; : &#39; População em 2020&#39;, }, ) token = &quot;pk.eyJ1IjoibGVvc21pIiwiYSI6ImNrOGIxcDd1OTA0MzAza2thdzFxdWE2ZXUifQ.PWOIGh8fM2S716JOKL0YIg&quot; fig.update_layout( margin = {&quot;r&quot;:0, &quot;t&quot;:0, &quot;l&quot;:0, &quot;b&quot;:0}, mapbox_accesstoken = token, # paper_bgcolor = &#39;rgba(0,0,0,0)&#39;, # https://stackoverflow.com/questions/29968152/python-setting-background-color-to-transparent-in-plotly-plots coloraxis = dict( # https://plotly.com/python/reference/#heatmap-colorbar-tickfont reversescale = True, colorbar = dict( thickness = 15, tickfont = dict( size = 10 ) ), # colorscale= [ # https://plotly.com/python/colorscales/#logarithmic-color-scale-with-graph-objects # [0.0, &#39;#ffffff&#39;], # # [0.1, &#39;#d0e2d0&#39;], # # [0.2, &#39;#a2c5a0&#39;], # # [0.3, &#39;#73a871&#39;], # # [0.4, &#39;#507e4e&#39;], # # [1.0, &#39;#324f30&#39;], # # ], ), ) # import os # if not os.path.exists(&quot;images&quot;): # os.mkdir(&quot;images&quot;) fig.write_image(f&quot;./mapas/fig1.{fig_format}&quot;) return fig . sheet = r&quot;./teste para o hackaton.xls&quot; df = pd.read_excel(sheet) map1_figure(df = df, coluna = &quot;pop_2020&quot;, fig_format=&quot;png&quot;) . . . sheet = r&quot;./teste para o hackaton.xls&quot; df = pd.read_excel(sheet) # RADAR GRAPH import plotly.graph_objects as go def radar(df1, theta, r): fig = go.Figure() # sorting data df2 = df1.sort_values( by = r, ascending = False ) fig.add_trace( go.Scatterpolar( r = df2[r], theta = df2[theta], opacity = 0.6, ) ) fig.update_traces( fill = &#39;toself&#39;, line_color = &#39;green&#39;, mode = &quot;markers&quot; ) fig.update_layout( polar = dict( radialaxis = dict( # type = &quot;log&quot;, tickangle = -45, side = &quot;clockwise&quot;, showline = True, linewidth = 1, gridcolor = &#39;rgb(211,211,211)&#39;, gridwidth = 1, # linecolor = &#39;rgb(211,211,211)&#39; ), angularaxis = dict( linewidth = 2, showline = True, gridcolor = &#39;rgb(211,211,211)&#39;, direction = &quot;clockwise&quot;, linecolor = &#39;green&#39; ), # sector = [0, 270], # paper_bgcolor = &quot;rgb(223, 0, 223)&quot; bgcolor = &quot;rgba(0,0,0,0)&quot;, ), title = r, # font_size = 10, ) fig.write_image(f&quot;./radar/{r}.png&quot;) fig.show() radar(df, r=&quot;pop_2020&quot;, theta=&quot;sigla&quot;) radar(df, r=&quot;test_score&quot;, theta=&quot;sigla&quot;) . . . . .",
            "url": "https://leo-smi.github.io/data-force/2020/10/04/Data-Force-01.html",
            "relUrl": "/2020/10/04/Data-Force-01.html",
            "date": " • Oct 4, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://leo-smi.github.io/data-force/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://leo-smi.github.io/data-force/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://leo-smi.github.io/data-force/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}